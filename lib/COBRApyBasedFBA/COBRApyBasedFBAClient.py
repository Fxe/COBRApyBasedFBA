# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class COBRApyBasedFBA(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_fba_pipeline(self, params, context=None):
        """
        Run flux balance analysis and return ID of FBA object with results
        :param params: instance of type "RunFBAPipelineParams" -> structure:
           parameter "fbamodel_id" of type "fbamodel_id" (A string
           representing a FBAModel id.), parameter "fbamodel_workspace" of
           type "workspace_name" (A string representing a workspace name.),
           parameter "media_id" of type "media_id" (A string representing a
           Media id.), parameter "media_workspace" of type "workspace_name"
           (A string representing a workspace name.), parameter
           "target_reaction" of type "reaction_id" (A string representing a
           reaction id.), parameter "fba_output_id" of type "fba_id" (A
           string representing a FBA id.), parameter "workspace" of type
           "workspace_name" (A string representing a workspace name.),
           parameter "fva" of type "bool" (A binary boolean), parameter
           "minimize_flux" of type "bool" (A binary boolean), parameter
           "simulate_ko" of type "bool" (A binary boolean), parameter
           "all_reversible" of type "bool" (A binary boolean), parameter
           "feature_ko_list" of list of type "feature_id" (A string
           representing a feature id.), parameter "reaction_ko_list" of list
           of type "reaction_id" (A string representing a reaction id.),
           parameter "media_supplement_list" of list of type "compound_id" (A
           string representing a compound id.), parameter
           "objective_fraction" of Double, parameter "max_c_uptake" of
           Double, parameter "max_n_uptake" of Double, parameter
           "max_p_uptake" of Double, parameter "max_s_uptake" of Double,
           parameter "max_o_uptake" of Double, parameter "default_max_uptake"
           of Double
        :returns: instance of type "RunFBAPipelineResults" -> structure:
           parameter "new_fba_ref" of type "ws_fba_id" (The workspace ID for
           a FBA data object. @id ws KBaseFBA.FBA), parameter "objective" of
           Long, parameter "report_name" of String, parameter "report_ref" of
           type "ws_report_id" (The workspace ID for a Report object @id ws
           KBaseReport.Report)
        """
        return self._client.call_method('COBRApyBasedFBA.run_fba_pipeline',
                                        [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('COBRApyBasedFBA.status',
                                        [], self._service_ver, context)
